# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosGroupV1Proposal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'group_policy_address': 'str',
        'metadata': 'str',
        'proposers': 'list[str]',
        'submit_time': 'datetime',
        'group_version': 'str',
        'group_policy_version': 'str',
        'status': 'str',
        'final_tally_result': 'CosmosGroupV1ProposalFinalTallyResult',
        'voting_period_end': 'datetime',
        'executor_result': 'str',
        'messages': 'list[dict(str, object)]'
    }

    attribute_map = {
        'id': 'id',
        'group_policy_address': 'group_policy_address',
        'metadata': 'metadata',
        'proposers': 'proposers',
        'submit_time': 'submit_time',
        'group_version': 'group_version',
        'group_policy_version': 'group_policy_version',
        'status': 'status',
        'final_tally_result': 'final_tally_result',
        'voting_period_end': 'voting_period_end',
        'executor_result': 'executor_result',
        'messages': 'messages'
    }

    def __init__(self, id=None, group_policy_address=None, metadata=None, proposers=None, submit_time=None, group_version=None, group_policy_version=None, status='PROPOSAL_STATUS_UNSPECIFIED', final_tally_result=None, voting_period_end=None, executor_result='PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED', messages=None):  # noqa: E501
        """CosmosGroupV1Proposal - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._group_policy_address = None
        self._metadata = None
        self._proposers = None
        self._submit_time = None
        self._group_version = None
        self._group_policy_version = None
        self._status = None
        self._final_tally_result = None
        self._voting_period_end = None
        self._executor_result = None
        self._messages = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if group_policy_address is not None:
            self.group_policy_address = group_policy_address
        if metadata is not None:
            self.metadata = metadata
        if proposers is not None:
            self.proposers = proposers
        if submit_time is not None:
            self.submit_time = submit_time
        if group_version is not None:
            self.group_version = group_version
        if group_policy_version is not None:
            self.group_policy_version = group_policy_version
        if status is not None:
            self.status = status
        if final_tally_result is not None:
            self.final_tally_result = final_tally_result
        if voting_period_end is not None:
            self.voting_period_end = voting_period_end
        if executor_result is not None:
            self.executor_result = executor_result
        if messages is not None:
            self.messages = messages

    @property
    def id(self):
        """Gets the id of this CosmosGroupV1Proposal.  # noqa: E501

        id is the unique id of the proposal.  # noqa: E501

        :return: The id of this CosmosGroupV1Proposal.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CosmosGroupV1Proposal.

        id is the unique id of the proposal.  # noqa: E501

        :param id: The id of this CosmosGroupV1Proposal.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def group_policy_address(self):
        """Gets the group_policy_address of this CosmosGroupV1Proposal.  # noqa: E501

        group_policy_address is the account address of group policy.  # noqa: E501

        :return: The group_policy_address of this CosmosGroupV1Proposal.  # noqa: E501
        :rtype: str
        """
        return self._group_policy_address

    @group_policy_address.setter
    def group_policy_address(self, group_policy_address):
        """Sets the group_policy_address of this CosmosGroupV1Proposal.

        group_policy_address is the account address of group policy.  # noqa: E501

        :param group_policy_address: The group_policy_address of this CosmosGroupV1Proposal.  # noqa: E501
        :type: str
        """

        self._group_policy_address = group_policy_address

    @property
    def metadata(self):
        """Gets the metadata of this CosmosGroupV1Proposal.  # noqa: E501

        metadata is any arbitrary metadata to attached to the proposal.  # noqa: E501

        :return: The metadata of this CosmosGroupV1Proposal.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CosmosGroupV1Proposal.

        metadata is any arbitrary metadata to attached to the proposal.  # noqa: E501

        :param metadata: The metadata of this CosmosGroupV1Proposal.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def proposers(self):
        """Gets the proposers of this CosmosGroupV1Proposal.  # noqa: E501

        proposers are the account addresses of the proposers.  # noqa: E501

        :return: The proposers of this CosmosGroupV1Proposal.  # noqa: E501
        :rtype: list[str]
        """
        return self._proposers

    @proposers.setter
    def proposers(self, proposers):
        """Sets the proposers of this CosmosGroupV1Proposal.

        proposers are the account addresses of the proposers.  # noqa: E501

        :param proposers: The proposers of this CosmosGroupV1Proposal.  # noqa: E501
        :type: list[str]
        """

        self._proposers = proposers

    @property
    def submit_time(self):
        """Gets the submit_time of this CosmosGroupV1Proposal.  # noqa: E501

        submit_time is a timestamp specifying when a proposal was submitted.  # noqa: E501

        :return: The submit_time of this CosmosGroupV1Proposal.  # noqa: E501
        :rtype: datetime
        """
        return self._submit_time

    @submit_time.setter
    def submit_time(self, submit_time):
        """Sets the submit_time of this CosmosGroupV1Proposal.

        submit_time is a timestamp specifying when a proposal was submitted.  # noqa: E501

        :param submit_time: The submit_time of this CosmosGroupV1Proposal.  # noqa: E501
        :type: datetime
        """

        self._submit_time = submit_time

    @property
    def group_version(self):
        """Gets the group_version of this CosmosGroupV1Proposal.  # noqa: E501

        group_version tracks the version of the group at proposal submission. This field is here for informational purposes only.  # noqa: E501

        :return: The group_version of this CosmosGroupV1Proposal.  # noqa: E501
        :rtype: str
        """
        return self._group_version

    @group_version.setter
    def group_version(self, group_version):
        """Sets the group_version of this CosmosGroupV1Proposal.

        group_version tracks the version of the group at proposal submission. This field is here for informational purposes only.  # noqa: E501

        :param group_version: The group_version of this CosmosGroupV1Proposal.  # noqa: E501
        :type: str
        """

        self._group_version = group_version

    @property
    def group_policy_version(self):
        """Gets the group_policy_version of this CosmosGroupV1Proposal.  # noqa: E501

        group_policy_version tracks the version of the group policy at proposal submission. When a decision policy is changed, existing proposals from previous policy versions will become invalid with the `ABORTED` status. This field is here for informational purposes only.  # noqa: E501

        :return: The group_policy_version of this CosmosGroupV1Proposal.  # noqa: E501
        :rtype: str
        """
        return self._group_policy_version

    @group_policy_version.setter
    def group_policy_version(self, group_policy_version):
        """Sets the group_policy_version of this CosmosGroupV1Proposal.

        group_policy_version tracks the version of the group policy at proposal submission. When a decision policy is changed, existing proposals from previous policy versions will become invalid with the `ABORTED` status. This field is here for informational purposes only.  # noqa: E501

        :param group_policy_version: The group_policy_version of this CosmosGroupV1Proposal.  # noqa: E501
        :type: str
        """

        self._group_policy_version = group_policy_version

    @property
    def status(self):
        """Gets the status of this CosmosGroupV1Proposal.  # noqa: E501

        status represents the high level position in the life cycle of the proposal. Initial value is Submitted.  # noqa: E501

        :return: The status of this CosmosGroupV1Proposal.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CosmosGroupV1Proposal.

        status represents the high level position in the life cycle of the proposal. Initial value is Submitted.  # noqa: E501

        :param status: The status of this CosmosGroupV1Proposal.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROPOSAL_STATUS_UNSPECIFIED", "PROPOSAL_STATUS_SUBMITTED", "PROPOSAL_STATUS_ACCEPTED", "PROPOSAL_STATUS_REJECTED", "PROPOSAL_STATUS_ABORTED", "PROPOSAL_STATUS_WITHDRAWN"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def final_tally_result(self):
        """Gets the final_tally_result of this CosmosGroupV1Proposal.  # noqa: E501


        :return: The final_tally_result of this CosmosGroupV1Proposal.  # noqa: E501
        :rtype: CosmosGroupV1ProposalFinalTallyResult
        """
        return self._final_tally_result

    @final_tally_result.setter
    def final_tally_result(self, final_tally_result):
        """Sets the final_tally_result of this CosmosGroupV1Proposal.


        :param final_tally_result: The final_tally_result of this CosmosGroupV1Proposal.  # noqa: E501
        :type: CosmosGroupV1ProposalFinalTallyResult
        """

        self._final_tally_result = final_tally_result

    @property
    def voting_period_end(self):
        """Gets the voting_period_end of this CosmosGroupV1Proposal.  # noqa: E501

        voting_period_end is the timestamp before which voting must be done. Unless a successfull MsgExec is called before (to execute a proposal whose tally is successful before the voting period ends), tallying will be done at this point, and the `final_tally_result`and `status` fields will be accordingly updated.  # noqa: E501

        :return: The voting_period_end of this CosmosGroupV1Proposal.  # noqa: E501
        :rtype: datetime
        """
        return self._voting_period_end

    @voting_period_end.setter
    def voting_period_end(self, voting_period_end):
        """Sets the voting_period_end of this CosmosGroupV1Proposal.

        voting_period_end is the timestamp before which voting must be done. Unless a successfull MsgExec is called before (to execute a proposal whose tally is successful before the voting period ends), tallying will be done at this point, and the `final_tally_result`and `status` fields will be accordingly updated.  # noqa: E501

        :param voting_period_end: The voting_period_end of this CosmosGroupV1Proposal.  # noqa: E501
        :type: datetime
        """

        self._voting_period_end = voting_period_end

    @property
    def executor_result(self):
        """Gets the executor_result of this CosmosGroupV1Proposal.  # noqa: E501

        executor_result is the final result of the proposal execution. Initial value is NotRun.  # noqa: E501

        :return: The executor_result of this CosmosGroupV1Proposal.  # noqa: E501
        :rtype: str
        """
        return self._executor_result

    @executor_result.setter
    def executor_result(self, executor_result):
        """Sets the executor_result of this CosmosGroupV1Proposal.

        executor_result is the final result of the proposal execution. Initial value is NotRun.  # noqa: E501

        :param executor_result: The executor_result of this CosmosGroupV1Proposal.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED", "PROPOSAL_EXECUTOR_RESULT_NOT_RUN", "PROPOSAL_EXECUTOR_RESULT_SUCCESS", "PROPOSAL_EXECUTOR_RESULT_FAILURE"]  # noqa: E501
        if executor_result not in allowed_values:
            raise ValueError(
                "Invalid value for `executor_result` ({0}), must be one of {1}"  # noqa: E501
                .format(executor_result, allowed_values)
            )

        self._executor_result = executor_result

    @property
    def messages(self):
        """Gets the messages of this CosmosGroupV1Proposal.  # noqa: E501

        messages is a list of `sdk.Msg`s that will be executed if the proposal passes.  # noqa: E501

        :return: The messages of this CosmosGroupV1Proposal.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this CosmosGroupV1Proposal.

        messages is a list of `sdk.Msg`s that will be executed if the proposal passes.  # noqa: E501

        :param messages: The messages of this CosmosGroupV1Proposal.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._messages = messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosGroupV1Proposal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosGroupV1Proposal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
