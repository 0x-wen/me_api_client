# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosGroupV1QueryVotesByProposalResponseVotes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'proposal_id': 'str',
        'voter': 'str',
        'option': 'str',
        'metadata': 'str',
        'submit_time': 'datetime'
    }

    attribute_map = {
        'proposal_id': 'proposal_id',
        'voter': 'voter',
        'option': 'option',
        'metadata': 'metadata',
        'submit_time': 'submit_time'
    }

    def __init__(self, proposal_id=None, voter=None, option='VOTE_OPTION_UNSPECIFIED', metadata=None, submit_time=None):  # noqa: E501
        """CosmosGroupV1QueryVotesByProposalResponseVotes - a model defined in Swagger"""  # noqa: E501
        self._proposal_id = None
        self._voter = None
        self._option = None
        self._metadata = None
        self._submit_time = None
        self.discriminator = None
        if proposal_id is not None:
            self.proposal_id = proposal_id
        if voter is not None:
            self.voter = voter
        if option is not None:
            self.option = option
        if metadata is not None:
            self.metadata = metadata
        if submit_time is not None:
            self.submit_time = submit_time

    @property
    def proposal_id(self):
        """Gets the proposal_id of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501

        proposal is the unique ID of the proposal.  # noqa: E501

        :return: The proposal_id of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501
        :rtype: str
        """
        return self._proposal_id

    @proposal_id.setter
    def proposal_id(self, proposal_id):
        """Sets the proposal_id of this CosmosGroupV1QueryVotesByProposalResponseVotes.

        proposal is the unique ID of the proposal.  # noqa: E501

        :param proposal_id: The proposal_id of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501
        :type: str
        """

        self._proposal_id = proposal_id

    @property
    def voter(self):
        """Gets the voter of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501

        voter is the account address of the voter.  # noqa: E501

        :return: The voter of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501
        :rtype: str
        """
        return self._voter

    @voter.setter
    def voter(self, voter):
        """Sets the voter of this CosmosGroupV1QueryVotesByProposalResponseVotes.

        voter is the account address of the voter.  # noqa: E501

        :param voter: The voter of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501
        :type: str
        """

        self._voter = voter

    @property
    def option(self):
        """Gets the option of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501

        option is the voter's choice on the proposal.  # noqa: E501

        :return: The option of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501
        :rtype: str
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this CosmosGroupV1QueryVotesByProposalResponseVotes.

        option is the voter's choice on the proposal.  # noqa: E501

        :param option: The option of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501
        :type: str
        """
        allowed_values = ["VOTE_OPTION_UNSPECIFIED", "VOTE_OPTION_YES", "VOTE_OPTION_ABSTAIN", "VOTE_OPTION_NO", "VOTE_OPTION_NO_WITH_VETO"]  # noqa: E501
        if option not in allowed_values:
            raise ValueError(
                "Invalid value for `option` ({0}), must be one of {1}"  # noqa: E501
                .format(option, allowed_values)
            )

        self._option = option

    @property
    def metadata(self):
        """Gets the metadata of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501

        metadata is any arbitrary metadata to attached to the vote.  # noqa: E501

        :return: The metadata of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CosmosGroupV1QueryVotesByProposalResponseVotes.

        metadata is any arbitrary metadata to attached to the vote.  # noqa: E501

        :param metadata: The metadata of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def submit_time(self):
        """Gets the submit_time of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501

        submit_time is the timestamp when the vote was submitted.  # noqa: E501

        :return: The submit_time of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501
        :rtype: datetime
        """
        return self._submit_time

    @submit_time.setter
    def submit_time(self, submit_time):
        """Sets the submit_time of this CosmosGroupV1QueryVotesByProposalResponseVotes.

        submit_time is the timestamp when the vote was submitted.  # noqa: E501

        :param submit_time: The submit_time of this CosmosGroupV1QueryVotesByProposalResponseVotes.  # noqa: E501
        :type: datetime
        """

        self._submit_time = submit_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosGroupV1QueryVotesByProposalResponseVotes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosGroupV1QueryVotesByProposalResponseVotes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
